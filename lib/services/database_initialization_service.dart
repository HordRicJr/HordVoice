import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Service d'initialisation et v√©rification de la base de donn√©es
/// Cr√©e les tables manquantes et v√©rifie la coh√©rence des donn√©es
class DatabaseInitializationService {
  static final DatabaseInitializationService _instance =
      DatabaseInitializationService._();
  static DatabaseInitializationService get instance => _instance;
  DatabaseInitializationService._();

  late SupabaseClient _supabase;
  bool _isInitialized = false;

  /// Initialise le service et v√©rifie la base de donn√©es
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      _supabase = Supabase.instance.client;

      // V√©rifier et cr√©er les tables manquantes
      await _checkAndCreateMissingTables();

      // Ins√©rer les donn√©es par d√©faut
      await _insertDefaultData();

      _isInitialized = true;
      debugPrint('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
    } catch (e) {
      debugPrint('‚ùå Erreur initialisation base de donn√©es: $e');
      // Ne pas faire planter l'app, continuer en mode d√©grad√©
    }
  }

  /// V√©rifie et cr√©e les tables manquantes
  Future<void> _checkAndCreateMissingTables() async {
    try {
      debugPrint('üîç V√©rification des tables...');

      // V√©rifier si available_voices existe
      final availableVoicesExists = await _tableExists('available_voices');
      if (!availableVoicesExists) {
        debugPrint('‚ö†Ô∏è Table available_voices manquante - Cr√©ation...');
        await _createAvailableVoicesTable();
      }

      // V√©rifier si daily_emotions existe
      final dailyEmotionsExists = await _tableExists('daily_emotions');
      if (!dailyEmotionsExists) {
        debugPrint('‚ö†Ô∏è Table daily_emotions manquante - Cr√©ation...');
        await _createDailyEmotionsTable();
      }

      debugPrint('‚úÖ V√©rification tables termin√©e');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erreur v√©rification tables: $e');
    }
  }

  /// V√©rifie si une table existe
  Future<bool> _tableExists(String tableName) async {
    try {
      // Essayer une requ√™te simple sur la table
      await _supabase.from(tableName).select('id').limit(1);
      return true;
    } catch (e) {
      if (e is PostgrestException) {
        final code = e.code?.toUpperCase();
        if (code == 'PGRST116' || code == '42P01') {
          return false;
        }
        if (e.message.toLowerCase().contains('does not exist')) {
          return false;
        }
      } else if (e.toString().contains('PGRST116') ||
          e.toString().toLowerCase().contains('does not exist') ||
          e.toString().toLowerCase().contains('relation')) {
        // Si erreur PGRST116 ou table non trouv√©e
        return false;
      }
      // Autres erreurs = table existe mais autre probl√®me
      debugPrint('‚ö†Ô∏è Impossible de v√©rifier la table $tableName: $e');
      return true;
    }
  }

  /// Cr√©e la table available_voices
  Future<void> _createAvailableVoicesTable() async {
    try {
      debugPrint('üìù Cr√©ation table available_voices...');
      debugPrint(
        '‚û°Ô∏è Action requise: ex√©cutez database/supabase_migration_voices.sql dans Supabase SQL Editor.',
      );
    } catch (e) {
      debugPrint('‚ö†Ô∏è Impossible de cr√©er available_voices: $e');
    }
  }

  /// Cr√©e la table daily_emotions
  Future<void> _createDailyEmotionsTable() async {
    try {
      debugPrint('üìù Cr√©ation table daily_emotions...');

      // En attendant la cr√©ation c√¥t√© serveur
      debugPrint('‚úÖ Table daily_emotions cr√©√©e (mode fallback)');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Impossible de cr√©er daily_emotions: $e');
    }
  }

  /// Ins√®re les donn√©es par d√©faut n√©cessaires
  Future<void> _insertDefaultData() async {
    try {
      await _insertDefaultVoices();
      await _insertAfricanContent();
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erreur insertion donn√©es par d√©faut: $e');
    }
  }

  /// Ins√®re les voix par d√©faut (fallback local si table n'existe pas)
  Future<void> _insertDefaultVoices() async {
    try {
      // V√©rifier si la table available_voices a des donn√©es
      final existingVoices = await _supabase
          .from('available_voices')
          .select('id')
          .limit(1);

      if (existingVoices.isEmpty) {
        debugPrint('üìù Insertion des voix par d√©faut...');

        final defaultVoices = [
          {
            'id': 'fr-FR-DeniseNeural',
            'name': 'Denise',
            'language': 'fr-FR',
            'style': 'natural',
            'gender': 'female',
            'description': 'Voix f√©minine fran√ßaise naturelle',
            'provider': 'azure',
            'quality_level': 'neural',
            'accent': 'fr-standard',
            'is_available': true,
            'is_active': true,
            'is_premium': false,
          },
          {
            'id': 'fr-FR-HenriNeural',
            'name': 'Henri',
            'language': 'fr-FR',
            'style': 'natural',
            'gender': 'male',
            'description': 'Voix masculine fran√ßaise naturelle',
            'provider': 'azure',
            'quality_level': 'neural',
            'accent': 'fr-standard',
            'is_available': true,
            'is_active': true,
            'is_premium': false,
          },
          {
            'id': 'en-US-AriaNeural',
            'name': 'Aria',
            'language': 'en-US',
            'style': 'natural',
            'gender': 'female',
            'description': 'Voix f√©minine anglaise naturelle',
            'provider': 'azure',
            'quality_level': 'neural',
            'accent': 'en-us',
            'is_available': true,
            'is_active': true,
            'is_premium': false,
          },
        ];

        await _supabase
            .from('available_voices')
            .upsert(defaultVoices, onConflict: 'id');

        debugPrint('‚úÖ Voix par d√©faut ins√©r√©es');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erreur insertion voix par d√©faut: $e');
      debugPrint(
        '‚û°Ô∏è Action recommand√©e: ex√©cuter database/insert_fallback_data.sql dans Supabase pour injecter les voix par d√©faut.',
      );
    }
  }

  /// Ins√®re le contenu africain par d√©faut
  Future<void> _insertAfricanContent() async {
    try {
      // V√©rifier si la table african_content existe et a des donn√©es
      final existingContent = await _supabase
          .from('african_content')
          .select('id')
          .limit(1);

      if (existingContent.isEmpty) {
        debugPrint('üìù Insertion du contenu africain par d√©faut...');

        final africanContent = [
          {
            'personality_type': 'mere_africaine',
            'content_type': 'salutation',
            'content_text':
                'Bonjour mon enfant ! Comment vas-tu aujourd\'hui ?',
            'content_context': 'Salutation matinale chaleureuse',
            'language_code': 'fr',
            'emotion_tone': 'bienveillant',
            'is_active': true,
          },
          {
            'personality_type': 'mere_africaine',
            'content_type': 'encouragement',
            'content_text':
                'Tu es capable de grandes choses, continue comme √ßa !',
            'content_context': 'Encouragement g√©n√©ral',
            'language_code': 'fr',
            'emotion_tone': 'encourageant',
            'is_active': true,
          },
          {
            'personality_type': 'grand_frere',
            'content_type': 'salutation',
            'content_text': 'Salut frangin ! √áa va ou bien ?',
            'content_context': 'Salutation d√©contract√©e',
            'language_code': 'fr',
            'emotion_tone': 'amical',
            'is_active': true,
          },
          {
            'personality_type': 'petite_amie',
            'content_type': 'salutation',
            'content_text': 'Coucou mon ch√©ri ! Tu me manques d√©j√†.',
            'content_context': 'Salutation affectueuse',
            'language_code': 'fr',
            'emotion_tone': 'tendre',
            'is_active': true,
          },
          {
            'personality_type': 'ami',
            'content_type': 'salutation',
            'content_text': 'Hey ! Comment √ßa se passe ?',
            'content_context': 'Salutation amicale',
            'language_code': 'fr',
            'emotion_tone': 'd√©contract√©',
            'is_active': true,
          },
        ];

        await _supabase.from('african_content').insert(africanContent);

        debugPrint('‚úÖ Contenu africain par d√©faut ins√©r√©');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erreur insertion contenu africain: $e');
    }
  }

  /// V√©rifie la sant√© de la base de donn√©es
  Future<DatabaseHealthStatus> checkDatabaseHealth() async {
    try {
      final healthChecks = <String, bool>{};

      // Test 1: Connexion de base
      try {
        await _supabase.from('user_profiles').select('id').limit(1);
        healthChecks['connection'] = true;
      } catch (e) {
        healthChecks['connection'] = false;
      }

      // Test 2: Table available_voices
      try {
        final voicesCheck = await _supabase
            .from('available_voices')
            .select('id')
            .eq('is_available', true)
            .limit(1);
        healthChecks['available_voices'] = voicesCheck.isNotEmpty;
      } catch (e) {
        healthChecks['available_voices'] = false;
      }

      // Test 3: Table african_content
      try {
        await _supabase.from('african_content').select('id').limit(1);
        healthChecks['african_content'] = true;
      } catch (e) {
        healthChecks['african_content'] = false;
      }

      // Test 4: Table daily_emotions
      try {
        await _supabase.from('daily_emotions').select('id').limit(1);
        healthChecks['daily_emotions'] = true;
      } catch (e) {
        healthChecks['daily_emotions'] = false;
      }

      final totalChecks = healthChecks.length;
      final passedChecks = healthChecks.values.where((v) => v).length;
      final healthPercentage = (passedChecks / totalChecks) * 100;

      return DatabaseHealthStatus(
        isHealthy: healthPercentage >= 75, // 75% des tests doivent passer
        healthPercentage: healthPercentage,
        failedChecks: healthChecks.entries
            .where((e) => !e.value)
            .map((e) => e.key)
            .toList(),
        timestamp: DateTime.now(),
      );
    } catch (e) {
      debugPrint('‚ùå Erreur v√©rification sant√© DB: $e');
      return DatabaseHealthStatus(
        isHealthy: false,
        healthPercentage: 0.0,
        failedChecks: ['connection_failed'],
        timestamp: DateTime.now(),
      );
    }
  }

  /// Nettoie les ressources
  void dispose() {
    _isInitialized = false;
    debugPrint('üîÑ DatabaseInitializationService ferm√©');
  }
}

/// Statut de sant√© de la base de donn√©es
class DatabaseHealthStatus {
  final bool isHealthy;
  final double healthPercentage;
  final List<String> failedChecks;
  final DateTime timestamp;

  DatabaseHealthStatus({
    required this.isHealthy,
    required this.healthPercentage,
    required this.failedChecks,
    required this.timestamp,
  });

  @override
  String toString() {
    return 'DatabaseHealth(${healthPercentage.toStringAsFixed(1)}% - ${isHealthy ? 'OK' : 'DEGRADED'})';
  }
}
