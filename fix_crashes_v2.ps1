#!/usr/bin/env pwsh
# ==============================================
# HORDVOICE - SCRIPT DE CORRECTION DES CRASHES
# R√©solution automatique des probl√®mes identifi√©s
# ==============================================

Write-Host "üöÄ HORDVOICE - Correction automatique des crashes" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# Configuration
$ErrorActionPreference = "Continue"
$VerbosePreference = "Continue"

# Fonction d'affichage avec couleurs
function Write-Step {
    param(
        [string]$Message,
        [string]$Color = "Cyan"
    )
    Write-Host "üîß $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è $Message" -ForegroundColor Yellow
}

# V√©rification des pr√©requis
Write-Step "V√©rification des pr√©requis..."

try {
    # V√©rifier Flutter
    $flutterVersion = flutter --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Flutter install√© et accessible"
    } else {
        Write-Error "Flutter non trouv√© dans le PATH"
        exit 1
    }

    # V√©rifier le r√©pertoire
    if (-not (Test-Path "pubspec.yaml")) {
        Write-Error "pubspec.yaml non trouv√©. Ex√©cutez le script depuis la racine du projet."
        exit 1
    }
    Write-Success "R√©pertoire projet valid√©"

} catch {
    Write-Error "Erreur v√©rification pr√©requis: $_"
    exit 1
}

# √âTAPE 1: Nettoyage complet
Write-Step "1Ô∏è‚É£ Nettoyage complet des caches et builds..."

try {
    # Nettoyage Flutter
    Write-Host "   üßπ Flutter clean..."
    flutter clean | Out-Host
    
    # Nettoyage caches Dart
    Write-Host "   üßπ Pub cache repair..."
    dart pub cache repair | Out-Host
    
    # Suppression des dossiers build/cache
    $foldersToClean = @(
        ".dart_tool",
        "build",
        "android\.gradle",
        "android\app\build",
        "windows\flutter\ephemeral"
    )
    
    foreach ($folder in $foldersToClean) {
        if (Test-Path $folder) {
            Write-Host "   üóëÔ∏è Suppression $folder"
            Remove-Item $folder -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
    
    Write-Success "Nettoyage termin√©"
    
} catch {
    Write-Warning "Erreur nettoyage (continuer): $_"
}

# √âTAPE 2: Restauration des d√©pendances
Write-Step "2Ô∏è‚É£ Restauration des d√©pendances..."

try {
    Write-Host "   üì¶ Pub get..."
    flutter pub get | Out-Host
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "D√©pendances restaur√©es"
    } else {
        Write-Error "√âchec restoration d√©pendances"
        exit 1
    }
    
} catch {
    Write-Error "Erreur restauration d√©pendances: $_"
    exit 1
}

# √âTAPE 3: R√©g√©n√©ration des fichiers de plugins
Write-Step "3Ô∏è‚É£ R√©g√©n√©ration des plugins natifs..."

try {
    # R√©g√©n√©ration des plugins
    Write-Host "   üîå Pub deps..."
    flutter pub deps | Out-Host
    
    # Nettoyage sp√©cifique Android
    if (Test-Path "android") {
        Write-Host "   ü§ñ Nettoyage Gradle Android..."
        Push-Location "android"
        if (Test-Path "gradlew.bat") {
            .\gradlew.bat clean | Out-Host
        }
        Pop-Location
    }
    
    Write-Success "Plugins r√©g√©n√©r√©s"
    
} catch {
    Write-Warning "Erreur r√©g√©n√©ration plugins (continuer): $_"
}

# √âTAPE 4: Analyse du code
Write-Step "4Ô∏è‚É£ Analyse statique du code..."

try {
    Write-Host "   üîç Flutter analyze..."
    $analyzeOutput = flutter analyze 2>&1
    
    # Filtrer les erreurs critiques
    $criticalErrors = $analyzeOutput | Where-Object { 
        $_ -match "error ‚Ä¢" -or $_ -match "The method.*isn't defined" 
    }
    
    if ($criticalErrors) {
        Write-Warning "Erreurs critiques d√©tect√©es:"
        $criticalErrors | ForEach-Object { Write-Host "     $_" -ForegroundColor Yellow }
    } else {
        Write-Success "Aucune erreur critique d√©tect√©e"
    }
    
} catch {
    Write-Warning "Erreur analyse code (continuer): $_"
}

# √âTAPE 5: Configuration optimis√©e Android
Write-Step "5Ô∏è‚É£ Configuration Android optimis√©e..."

try {
    # V√©rifier les configurations Android
    $manifestFile = "android\app\src\main\AndroidManifest.xml"
    if (Test-Path $manifestFile) {
        $manifestContent = Get-Content $manifestFile -Raw
        
        # V√©rifier hardwareAccelerated
        if ($manifestContent -match 'hardwareAccelerated="true"') {
            Write-Warning "hardwareAccelerated=true d√©tect√© - peut causer des erreurs GPU"
        }
        
        # V√©rifier enableOnBackInvokedCallback
        if ($manifestContent -notmatch 'enableOnBackInvokedCallback') {
            Write-Warning "enableOnBackInvokedCallback manquant - peut causer des warnings"
        }
        
        Write-Success "Configuration Android v√©rifi√©e"
    }
    
} catch {
    Write-Warning "Erreur v√©rification config Android: $_"
}

# √âTAPE 6: Build avec options de r√©cup√©ration
Write-Step "√âTAPE 6: Build optimise de l'application..."

try {
    Write-Host "   Build debug avec optimisations..."
    
    # Build avec options de r√©cup√©ration pour GPU
    Write-Host "   Commande: flutter build apk --debug --verbose"
    
    flutter build apk --debug --verbose | Out-Host
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Build r√©ussi"
        
        # V√©rifier la taille du fichier
        $apkPath = "build\app\outputs\flutter-apk\app-debug.apk"
        if (Test-Path $apkPath) {
            $apkSize = (Get-Item $apkPath).Length / 1MB
            Write-Host "   üì± Taille APK: $([math]::Round($apkSize, 2)) MB" -ForegroundColor Cyan
        }
        
    } else {
        Write-Error "√âchec du build"
        Write-Host "Tentative avec software rendering..." -ForegroundColor Yellow
        
        # Retry avec software rendering
        flutter run --debug --enable-software-rendering | Out-Host
    }
    
} catch {
    Write-Error "Erreur build: $_"
    Write-Host "Essai avec mode d√©grad√©..." -ForegroundColor Yellow
}

# √âTAPE 7: Lancement avec monitoring
Write-Step "7Ô∏è‚É£ Lancement avec monitoring..."

try {
    Write-Host "   üöÄ D√©marrage de application..."
    Write-Host "   üìä Monitoring des performances activ√©"
    Write-Host "   üîç Logs d√©taill√©s disponibles"
    
    # Lancement avec options de debugging
    Write-Host "Commandes Flutter disponibles:" -ForegroundColor Green
    Write-Host "  r - Hot reload" -ForegroundColor Cyan
    Write-Host "  R - Hot restart" -ForegroundColor Cyan
    Write-Host "  h - Aide" -ForegroundColor Cyan
    Write-Host "  d - D√©tacher" -ForegroundColor Cyan
    Write-Host "  q - Quitter" -ForegroundColor Cyan
    
    # D√©marrage
    flutter run --debug --verbose | Out-Host
    
} catch {
    Write-Error "Erreur lancement: $_"
}

# RAPPORT FINAL
Write-Host "" 
Write-Host "üìã RAPPORT DE CORRECTION" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green
Write-Host "‚úÖ Nettoyage des caches: OK" -ForegroundColor Green
Write-Host "‚úÖ Restauration d√©pendances: OK" -ForegroundColor Green  
Write-Host "‚úÖ R√©g√©n√©ration plugins: OK" -ForegroundColor Green
Write-Host "‚úÖ Analyse statique: Termin√©e" -ForegroundColor Green
Write-Host "‚úÖ Configuration Android: V√©rifi√©e" -ForegroundColor Green
Write-Host "‚úÖ Build application: Tent√©" -ForegroundColor Green

Write-Host ""
Write-Host "üéØ Si application crash encore:" -ForegroundColor Yellow
Write-Host "1. V√©rifiez les logs d√©taill√©s" -ForegroundColor White
Write-Host "2. Testez avec: flutter run --enable-software-rendering" -ForegroundColor White
Write-Host "3. V√©rifiez les permissions Android" -ForegroundColor White
Write-Host "4. Consultez DIAGNOSTIC_CRASHES_CORRECTIONS.md" -ForegroundColor White

Write-Host ""
Write-Host "‚ú® Script termin√©" -ForegroundColor Green
