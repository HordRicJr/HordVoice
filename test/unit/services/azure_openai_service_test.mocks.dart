// Mocks generated by Mockito 5.4.6 from annotations
// in hordvoice/test/unit/services/azure_openai_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i7;

import 'package:hordvoice/services/circuit_breaker.dart' as _i4;
import 'package:hordvoice/services/environment_config.dart' as _i8;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCircuitBreaker_4 extends _i1.SmartFake
    implements _i4.CircuitBreaker {
  _FakeCircuitBreaker_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i3.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i3.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i3.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i3.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i3.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i3.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i3.Future<_i2.Response>);

  @override
  _i3.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
          )
          as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i3.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i3.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [EnvironmentConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvironmentConfig extends _i1.Mock implements _i8.EnvironmentConfig {
  MockEnvironmentConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConfigured =>
      (super.noSuchMethod(Invocation.getter(#isConfigured), returnValue: false)
          as bool);

  @override
  String get azureOpenAIDeployment =>
      (super.noSuchMethod(
            Invocation.getter(#azureOpenAIDeployment),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#azureOpenAIDeployment),
            ),
          )
          as String);

  @override
  String get azureOpenAIApiVersion =>
      (super.noSuchMethod(
            Invocation.getter(#azureOpenAIApiVersion),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#azureOpenAIApiVersion),
            ),
          )
          as String);

  @override
  bool get debugMode =>
      (super.noSuchMethod(Invocation.getter(#debugMode), returnValue: false)
          as bool);

  @override
  String get logLevel =>
      (super.noSuchMethod(
            Invocation.getter(#logLevel),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#logLevel),
            ),
          )
          as String);

  @override
  _i3.Future<void> loadConfig() =>
      (super.noSuchMethod(
            Invocation.method(#loadConfig, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  String? getValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key])) as String?);

  @override
  String getValueOrDefault(String? key, String? defaultValue) =>
      (super.noSuchMethod(
            Invocation.method(#getValueOrDefault, [key, defaultValue]),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#getValueOrDefault, [key, defaultValue]),
            ),
          )
          as String);

  @override
  bool hasValidValue(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#hasValidValue, [key]),
            returnValue: false,
          )
          as bool);

  @override
  List<String> validateConfiguration() =>
      (super.noSuchMethod(
            Invocation.method(#validateConfiguration, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void printConfigStatus() => super.noSuchMethod(
    Invocation.method(#printConfigStatus, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CircuitBreaker].
///
/// See the documentation for Mockito's code generation for more information.
class MockCircuitBreaker extends _i1.Mock implements _i4.CircuitBreaker {
  MockCircuitBreaker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get serviceName =>
      (super.noSuchMethod(
            Invocation.getter(#serviceName),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#serviceName),
            ),
          )
          as String);

  @override
  int get failureThreshold =>
      (super.noSuchMethod(Invocation.getter(#failureThreshold), returnValue: 0)
          as int);

  @override
  Duration get timeout =>
      (super.noSuchMethod(
            Invocation.getter(#timeout),
            returnValue: _FakeDuration_2(this, Invocation.getter(#timeout)),
          )
          as Duration);

  @override
  Duration get retryTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#retryTimeout),
            returnValue: _FakeDuration_2(
              this,
              Invocation.getter(#retryTimeout),
            ),
          )
          as Duration);

  @override
  _i4.CircuitState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i4.CircuitState.closed,
          )
          as _i4.CircuitState);

  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  bool get isHalfOpen =>
      (super.noSuchMethod(Invocation.getter(#isHalfOpen), returnValue: false)
          as bool);

  @override
  Map<String, dynamic> get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Future<T> execute<T>(_i3.Future<T> Function()? operation) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [operation]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#execute, [operation]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_3<T>(
                  this,
                  Invocation.method(#execute, [operation]),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> executeWithFallback<T>(
    _i3.Future<T> Function()? operation,
    T Function()? fallback,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeWithFallback, [operation, fallback]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#executeWithFallback, [
                      operation,
                      fallback,
                    ]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_3<T>(
                  this,
                  Invocation.method(#executeWithFallback, [
                    operation,
                    fallback,
                  ]),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<void> reset() =>
      (super.noSuchMethod(
            Invocation.method(#reset, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CircuitBreakerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCircuitBreakerManager extends _i1.Mock
    implements _i4.CircuitBreakerManager {
  MockCircuitBreakerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CircuitBreaker getCircuit(
    String? serviceName, {
    int? failureThreshold,
    Duration? timeout,
    Duration? retryTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getCircuit,
              [serviceName],
              {
                #failureThreshold: failureThreshold,
                #timeout: timeout,
                #retryTimeout: retryTimeout,
              },
            ),
            returnValue: _FakeCircuitBreaker_4(
              this,
              Invocation.method(
                #getCircuit,
                [serviceName],
                {
                  #failureThreshold: failureThreshold,
                  #timeout: timeout,
                  #retryTimeout: retryTimeout,
                },
              ),
            ),
          )
          as _i4.CircuitBreaker);

  @override
  Map<String, dynamic> getAllMetrics() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMetrics, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Future<void> resetAll() =>
      (super.noSuchMethod(
            Invocation.method(#resetAll, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
